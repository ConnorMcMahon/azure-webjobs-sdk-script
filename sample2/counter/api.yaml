---
tableStorage:
    table: apicountertablelocal
    partitionKey: items
    connection: AzureWebJobsStorage

language: CSharp

commonCode: |
        #r "Microsoft.WindowsAzure.Storage"
        using System.Net;
        using Microsoft.WindowsAzure.Storage.Table;
        using System.Net.Http;
    
functions:
    - name: initialize
      route: "[GET counteryaml/{countername}/initialize]"
      bindings:
        - "req:httpTrigger-in"
        - "res:http-out"
        - "counter:table-out"
      code: |
        public static async Task<HttpResponseMessage> Run(HttpRequestMessage req, TraceWriter log, ICollector<Counter> counter, String countername)
        {
            HttpResponseMessage res = null;
            try
            {
                counter.Add(
                    new Counter()
                    {
                        RowKey = countername,
                        PartitionKey = "items",
                        Value = 0
                    });
                res = new HttpResponseMessage(HttpStatusCode.OK)
                {
                    Content = new StringContent("The counter has been initialized")
                };
            }
            catch
            {
                res = new HttpResponseMessage(HttpStatusCode.OK)
                {
                    Content = new StringContent("The counter already exists")
                };
            }
            return res;
        }
        public class Counter : TableEntity
        {
            public int Value { get; set; }
        }

    - name: get
      route: "[GET counteryaml/{countername}]"
      bindings:
        - "req:httpTrigger-in"
        - "res:http-out"
        - "counters:table-in"
      code: |
        public static async Task<HttpResponseMessage> Run(HttpRequestMessage req, TraceWriter log, IQueryable<Counter> counters, string countername)
        {
            HttpResponseMessage res = null;
            try
            {
                Counter counter = counters.Where(c => c.RowKey.Equals(countername)).First();
                res = new HttpResponseMessage(HttpStatusCode.OK)
                {
                    Content = new StringContent("The counter's value is " + counter.Value)
                };
            }
            catch
            {
                res = new HttpResponseMessage(HttpStatusCode.BadRequest)
                {
                    Content = new StringContent("The counter has not properly initialized.")
                };
            }
            return res;
        }  
        public class Counter : TableEntity
        {
            public int Value { get; set; }
        }
    - name: add
      route: "[GET counteryaml/{countername}/increment?add=int]"
      bindings:
        - "req:httpTrigger-in"
        - "res:http-out"
        - "tableBinding:table-out"
      code: |
        public static async Task<HttpResponseMessage> Run(HttpRequestMessage req, TraceWriter log, CloudTable tableBinding, int add, string countername)
        {
            HttpResponseMessage res = null;
            try
            {
                var getCurrentValue = new TableQuery<Counter>().Where(TableQuery.GenerateFilterCondition("RowKey", QueryComparisons.Equal, countername));
                Counter counter = tableBinding.ExecuteQuery(getCurrentValue).First();
                counter.Value += add;
                    
                TableOperation updateOperation = TableOperation.Replace(counter);
                tableBinding.Execute(updateOperation);
                res = new HttpResponseMessage(HttpStatusCode.OK)
                {
                    Content = new StringContent("Updated the value of the counter by " + add + ".")
                };
            }
            catch
            {
                res = new HttpResponseMessage(HttpStatusCode.BadRequest)
                {
                    Content = new StringContent("Failed to update the counter.")
                };
            }
            return res;
        }
        public class Counter : TableEntity
        {
            public int Value { get; set; }
        }
